#ifndef KERNEL_CODE_H
#define KERNEL_CODE_H
#include <string>

namespace lod_generator {
    /*
        #if defined(cl_khr_fp64)  // Khronos extension available? "
            #pragma OPENCL EXTENSION cl_khr_fp64 : enable "
            #define DOUBLE_SUPPORT_AVAILABLE "
        #elif defined(cl_amd_fp64)  // AMD extension available? "
            #pragma OPENCL EXTENSION cl_amd_fp64 : enable "
            #define DOUBLE_SUPPORT_AVAILABLE "
        #endif "
    */

    std::string GET_VALID_PAIRS = 
        "double get_length(double* v1, double* v2) { \n"
        "    double value = sqrt(v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]); \n"
        "    return value; \n"
        "} \n"
        "\n"
        "__kernel void get_valid_pairs( \n"
        "    __global uint* res, \n"
        "    __global double* vertexes, uint v_size, \n"
        "    __global uint* indexes, uint i_size){ \n"
        "    uint surf_id = get_global_id(0); \n"
        "    uint data_start = surf_id * 3; \n"
        "    if(data_start > i_size) {\n"
        "        return; \n"
        "    }\n"
        "    uint surf[3] = {0,0,0}; \n"
        "    surf[0] = indexes[data_start]; \n"
        "    surf[1] = indexes[data_start + 1]; \n"
        "    surf[2] = indexes[data_start + 2]; \n"
        "    \n"
        "    double v1[3]; \n"
        "    double v2[3]; \n"
        "    double v3[3]; \n"
        "    \n"
        "    v1[0] = vertexes[surf[0] * 3]; \n"
        "    v1[1] = vertexes[surf[0] * 3 + 1]; \n"
        "    v1[2] = vertexes[surf[0] * 3 + 2]; \n"
        "    \n"
        "    v2[0] = vertexes[surf[1] * 3]; \n"
        "    v2[1] = vertexes[surf[1] * 3 + 1]; \n"
        "    v2[2] = vertexes[surf[1] * 3 + 2]; \n"
        "    \n"
        "    v3[0] = vertexes[surf[2] * 3]; \n"
        "    v3[1] = vertexes[surf[2] * 3 + 1]; \n"
        "    v3[2] = vertexes[surf[2] * 3 + 2]; \n"
        "    \n"
        "    if(get_length(v1, v2) < 0.5f) { \n"
        "        res[surf_id * 2] = surf[0]; \n"
        "        res[surf_id * 2 + 1] = surf[1]; \n"
        "        return; \n"
        "    } \n"
        "    \n"
        "    if(get_length(v1, v3) < 0.5f) { \n"
        "        res[surf_id * 2] = surf[0]; \n"
        "        res[surf_id * 2 + 1] = surf[2]; \n"
        "        return; \n"
        "    } \n"
        "    \n"
        "    if(get_length(v2, v3) < 0.5f) { \n"
        "        res[surf_id * 2] = surf[1]; \n"
        "        res[surf_id * 2 + 1] = surf[2]; \n"
        "        return; \n"
        "    } \n"
        "    return; \n"
        "}\n";
}

#endif