#ifndef KERNEL_CODE_H
#define KERNEL_CODE_H
#include <string>

namespace lod_generator {
    /*
        #if defined(cl_khr_fp64)  // Khronos extension available? "
            #pragma OPENCL EXTENSION cl_khr_fp64 : enable "
            #define DOUBLE_SUPPORT_AVAILABLE "
        #elif defined(cl_amd_fp64)  // AMD extension available? "
            #pragma OPENCL EXTENSION cl_amd_fp64 : enable "
            #define DOUBLE_SUPPORT_AVAILABLE "
        #endif "
    */

    std::string GET_VALID_PAIRS = 
        " #if defined(cl_khr_fp64)"
        "   #pragma OPENCL EXTENSION cl_khr_fp64 : enable"
        "#elif defined(cl_amd_fp64)"
        "   #pragma OPENCL EXTENSION cl_amd_fp64 : enable"
        "#endif"
        " "
        "double get_length(double* v1, double* v2) {  "
        "    double temp = v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2];"
        "    double value = sqrt(temp);  "
        "    return value;  "
        "}  "
        " "
        "__kernel void get_valid_pairs(  "
        "    __global uint* res,  "
        "    __global double* vertexes, __global uint v_size,  "
        "    __global uint* indexes, __global uint i_size){  "
        "    uint surf_id = get_global_id(0);  "
        "    uint data_start = surf_id * 3;  "
        "    if(data_start > i_size) { "
        "        return;  "
        "    } "
        "    uint surf[3] = {0,0,0};  "
        "    surf[0] = indexes[data_start];  "
        "    surf[1] = indexes[data_start + 1];  "
        "    surf[2] = indexes[data_start + 2];  "
        "     "
        "    double v1[3];  "
        "    double v2[3];  "
        "    double v3[3];  "
        "     "
        "    v1[0] = vertexes[surf[0] * 3];  "
        "    v1[1] = vertexes[surf[0] * 3 + 1];  "
        "    v1[2] = vertexes[surf[0] * 3 + 2];  "
        "     "
        "    v2[0] = vertexes[surf[1] * 3];  "
        "    v2[1] = vertexes[surf[1] * 3 + 1];  "
        "    v2[2] = vertexes[surf[1] * 3 + 2];  "
        "     "
        "    v3[0] = vertexes[surf[2] * 3];  "
        "    v3[1] = vertexes[surf[2] * 3 + 1];  "
        "    v3[2] = vertexes[surf[2] * 3 + 2];  "
        "     "
        "    if(get_length(v1, v2) < 0.5f) {  "
        "        res[surf_id * 2] = surf[0];  "
        "        res[surf_id * 2 + 1] = surf[1];  "
        "        return;  "
        "    }  "
        "     "
        "    if(get_length(v1, v3) < 0.5f) {  "
        "        res[surf_id * 2] = surf[0];  "
        "        res[surf_id * 2 + 1] = surf[2];  "
        "        return;  "
        "    }  "
        "     "
        "    if(get_length(v2, v3) < 0.5f) {  "
        "        res[surf_id * 2] = surf[1];  "
        "        res[surf_id * 2 + 1] = surf[2];  "
        "        return;  "
        "    }  "
        "    return;  "
        "} ";
}

#endif